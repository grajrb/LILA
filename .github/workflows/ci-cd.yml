name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Lint and validate code
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          client/package-lock.json
          server/typescript/package-lock.json
    
    - name: Lint frontend
      run: |
        cd client
        npm ci
        npm run lint
        
    - name: Lint backend
      run: |
        cd server/typescript
        npm ci
        # Add TypeScript compilation check
        npx tsc --noEmit
        
    - name: Check formatting
      run: |
        # Add prettier check if configured
        echo "Checking code formatting..."

  # Build frontend
  build-frontend:
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
    
    - name: Install dependencies
      run: |
        cd client
        npm ci
        
    - name: Build frontend
      run: |
        cd client
        npm run build
      env:
        NEXT_PUBLIC_NAKAMA_HOST: localhost
        NEXT_PUBLIC_NAKAMA_PORT: 7350
        NEXT_PUBLIC_NAKAMA_SERVER_KEY: defaultkey
        NEXT_PUBLIC_NAKAMA_USE_SSL: false
        
    - name: Upload frontend build
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: client/.next
        retention-days: 7

  # Build backend
  build-backend:
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: server/typescript/package-lock.json
    
    - name: Install dependencies
      run: |
        cd server/typescript
        npm ci
        
    - name: Build backend
      run: |
        cd server/typescript
        npm run build
        
    - name: Validate build output
      run: |
        if [ ! -f "server/typescript/dist/index.js" ]; then
          echo "❌ Build failed - index.js not found"
          exit 1
        fi
        echo "✅ Backend build successful"
        
    - name: Upload backend build
      uses: actions/upload-artifact@v3
      with:
        name: backend-build
        path: server/typescript/dist
        retention-days: 7

  # Integration tests
  integration-test:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    
    services:
      cockroachdb:
        image: cockroachdb/cockroach:latest-v23.1
        options: --health-cmd="./cockroach sql --insecure --execute='SELECT 1'" --health-interval=10s --health-timeout=5s --health-retries=5
        ports:
          - 26257:26257
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: backend-build
        path: server/typescript/dist
        
    - name: Setup Docker Compose
      run: |
        # Start only the necessary services for testing
        cd server
        docker-compose -f docker-compose.yml up -d nakama
        
    - name: Wait for services
      run: |
        echo "Waiting for Nakama to start..."
        timeout 60 bash -c 'until curl -f http://localhost:7350/healthcheck; do sleep 2; done' || true
        
    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        # Add actual integration tests here
        # Test matchmaking, game logic, etc.
        
    - name: Cleanup
      if: always()
      run: |
        cd server
        docker-compose down

  # Security scanning
  security:
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Audit npm packages
      run: |
        cd client && npm audit --audit-level=high
        cd ../server/typescript && npm audit --audit-level=high

  # Performance tests
  performance:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli
      
    - name: Start local server
      run: |
        cd client
        npm ci
        npm run start &
        sleep 10
        
    - name: Run Lighthouse CI
      run: |
        lhci autorun --upload.target=temporary-public-storage
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Deployment status
  deployment-status:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend, integration-test, security]
    if: always()
    
    steps:
    - name: Report status
      run: |
        echo "📊 Build Status Summary:"
        echo "Frontend Build: ${{ needs.build-frontend.result }}"
        echo "Backend Build: ${{ needs.build-backend.result }}"
        echo "Integration Tests: ${{ needs.integration-test.result }}"
        echo "Security Scan: ${{ needs.security.result }}"
        
        if [[ "${{ needs.build-frontend.result }}" == "success" && 
              "${{ needs.build-backend.result }}" == "success" && 
              "${{ needs.integration-test.result }}" == "success" && 
              "${{ needs.security.result }}" == "success" ]]; then
          echo "✅ All checks passed - Ready for deployment!"
          echo "ready-for-deployment=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Some checks failed - Deployment blocked"
          echo "ready-for-deployment=false" >> $GITHUB_OUTPUT
        fi