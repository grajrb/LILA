name: Auto Deploy to Sevalla

on:
  push:
    branches: [main]
    paths:
      - 'client/**'
      - 'server/**'
      - 'docker-compose.sevalla.yml'
      - '.github/workflows/auto-deploy-sevalla.yml'

env:
  SEVALLA_APP_NAME: lila-tictactoe
  NODE_VERSION: '18'

jobs:
  prepare-deployment:
    runs-on: ubuntu-latest
    outputs:
      deployment-id: ${{ steps.create-deployment.outputs.deployment_id }}

    steps:
      - name: Create deployment
        id: create-deployment
        uses: actions/github-script@v6
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Deploy LILA to Sevalla',
              auto_merge: false,
              required_contexts: []
            });
            return deployment.data.id;

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: prepare-deployment

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            client/package-lock.json
            server/typescript/package-lock.json

      # Build backend
      - name: Build backend match handler
        run: |
          cd server/typescript
          npm ci
          npm run build
          echo "‚úÖ Backend build complete"

      # Build frontend
      - name: Build frontend for production
        run: |
          cd client
          npm ci
          npm run build
          echo "‚úÖ Frontend build complete"
        env:
          NODE_ENV: production
          NEXT_PUBLIC_NAKAMA_HOST: ${{ secrets.SEVALLA_NAKAMA_HOST }}
          NEXT_PUBLIC_NAKAMA_PORT: 7350
          NEXT_PUBLIC_NAKAMA_SERVER_KEY: ${{ secrets.SEVALLA_NAKAMA_SERVER_KEY }}
          NEXT_PUBLIC_NAKAMA_USE_SSL: true

      # Create deployment package
      - name: Create deployment package
        run: |
          mkdir -p deployment-package

          # Copy deployment configuration
          cp docker-compose.sevalla.yml deployment-package/

          # Copy frontend with production build
          cp -r client deployment-package/

          # Copy backend build output
          mkdir -p deployment-package/server/typescript
          cp -r server/typescript/dist deployment-package/server/typescript/

          # Create environment file
          cat > deployment-package/.env.sevalla << EOF
          NAKAMA_HOST=${{ secrets.SEVALLA_NAKAMA_HOST }}
          NAKAMA_SERVER_KEY=${{ secrets.SEVALLA_NAKAMA_SERVER_KEY }}
          NAKAMA_CONSOLE_USERNAME=${{ secrets.SEVALLA_NAKAMA_CONSOLE_USERNAME }}
          NAKAMA_CONSOLE_PASSWORD=${{ secrets.SEVALLA_NAKAMA_CONSOLE_PASSWORD }}
          NODE_ENV=production
          DATABASE_URL=${{ secrets.SEVALLA_DATABASE_URL }}
          EOF

          echo "üì¶ Deployment package created"

      # Deploy to Sevalla using API (when available)
      - name: Deploy to Sevalla
        id: deploy
        run: |
          echo "üöÄ Deploying to Sevalla..."

          # Method 1: Using Sevalla CLI (when available)
          # npm install -g @sevalla/cli
          # echo "${{ secrets.SEVALLA_API_TOKEN }}" | sevalla auth login --token
          # sevalla deploy --app ${{ env.SEVALLA_APP_NAME }} --compose deployment-package/docker-compose.sevalla.yml

          # Method 2: Using Sevalla API directly
          DEPLOYMENT_URL="https://api.sevalla.com/v1/apps/${{ env.SEVALLA_APP_NAME }}/deployments"

          # Create deployment archive
          cd deployment-package
          tar -czf ../deployment.tar.gz .
          cd ..

          # Deploy via API (placeholder - adjust based on actual Sevalla API)
          curl -X POST "$DEPLOYMENT_URL" \
            -H "Authorization: Bearer ${{ secrets.SEVALLA_API_TOKEN }}" \
            -H "Content-Type: application/gzip" \
            -F "deployment=@deployment.tar.gz" \
            -F "environment=production" \
            -F "auto_deploy=true" \
            --fail-with-body
            
          echo "deployment_status=success" >> $GITHUB_OUTPUT
          echo "deployment_url=https://${{ secrets.SEVALLA_NAKAMA_HOST }}" >> $GITHUB_OUTPUT

      # Update deployment status
      - name: Update deployment status (success)
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ needs.prepare-deployment.outputs.deployment-id }},
              state: 'success',
              environment_url: 'https://${{ secrets.SEVALLA_NAKAMA_HOST }}',
              description: 'Deployment succeeded'
            });

      - name: Update deployment status (failure)
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ needs.prepare-deployment.outputs.deployment-id }},
              state: 'failure',
              description: 'Deployment failed'
            });

  # Post-deployment verification
  verify-deployment:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: success()

    steps:
      - name: Wait for deployment to be ready
        run: |
          echo "‚è≥ Waiting for deployment to be ready..."
          sleep 60

      - name: Verify frontend is accessible
        run: |
          echo "üîç Checking frontend..."
          curl -f -s -o /dev/null https://${{ secrets.SEVALLA_NAKAMA_HOST }} || {
            echo "‚ùå Frontend health check failed"
            exit 1
          }
          echo "‚úÖ Frontend is accessible"

      - name: Verify backend API is accessible
        run: |
          echo "üîç Checking backend API..."
          curl -f -s -o /dev/null https://${{ secrets.SEVALLA_NAKAMA_HOST }}:7350/healthcheck || {
            echo "‚ùå Backend API health check failed" 
            exit 1
          }
          echo "‚úÖ Backend API is accessible"

      - name: Verify Nakama console is accessible
        run: |
          echo "üîç Checking Nakama console..."
          curl -f -s -o /dev/null https://${{ secrets.SEVALLA_NAKAMA_HOST }}:7351/health || {
            echo "‚ùå Nakama console health check failed"
            exit 1
          }
          echo "‚úÖ Nakama console is accessible"

      # Run smoke tests
      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests..."

          # Test 1: Verify authentication endpoint
          # AUTH_RESPONSE=$(curl -s -X POST https://${{ secrets.SEVALLA_NAKAMA_HOST }}:7350/v2/account/authenticate/device \
          #   -H "Content-Type: application/json" \
          #   -d '{"id":"test-device"}')
          # echo "Auth test: $AUTH_RESPONSE"

          # Test 2: Verify RPC endpoints are available
          # Add more specific tests here

          echo "‚úÖ Smoke tests completed"

      # Notify deployment success
      - name: Notify deployment success
        if: success()
        run: |
          echo "üéâ LILA successfully deployed to Sevalla!"
          echo "üéÆ Game URL: https://${{ secrets.SEVALLA_NAKAMA_HOST }}"
          echo "üîß Admin Console: https://${{ secrets.SEVALLA_NAKAMA_HOST }}:7351"
          echo "üìä API Endpoint: https://${{ secrets.SEVALLA_NAKAMA_HOST }}:7350"

      # Send notification to Slack/Discord (optional)
      - name: Send notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            üöÄ LILA Deployment to Sevalla: ${{ job.status }}

            üìä Details:
            ‚Ä¢ Commit: ${{ github.sha }}
            ‚Ä¢ Author: ${{ github.actor }}
            ‚Ä¢ Branch: ${{ github.ref_name }}
            ‚Ä¢ Game URL: https://${{ secrets.SEVALLA_NAKAMA_HOST }}

            ${{ job.status == 'success' && '‚úÖ Ready to play!' || '‚ùå Deployment failed' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
